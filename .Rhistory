axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(Group2, aes( fill = Remixed)) +
geom_bar(position = "fill", show.legend = FALSE)+
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(Group2, aes( fill = Remixed)) +
geom_bar(position = "fill", show.legend = FALSE)+
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# LOAD LIBRARIES
library(shiny)
library(ggplot2)
library(rsconnect)
library(Matrix)
library(devtools)
library(shinythemes)
library(graphics)
library(dplyr)
library(readxl)
ggplot(Group2, aes( fill = Remixed)) +
geom_bar(position = "fill", show.legend = FALSE)+
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(Group2, aes(as.factor(Loves), fill = Remixed)) +
geom_bar(position = "fill", show.legend = FALSE)+
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
df$Remixed = TRUE
ggplot(Group2, aes(as.factor(Loves), fill = Remixed)) +
geom_bar(position = "fill", show.legend = FALSE)+
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
View(df)
totRow = nrow(Group2)
trueRow = nrow(subset(Group2, Remixed==TRUE))
falseRow = nrow(subset(Group2, Remixed==falseRow))
falseRow = nrow(subset(Group2, Remixed==FALSE))
totRow+falseRow
trueRow+falseRow
df = data.frame(
Remixed = c("TRUE","FALSE"),
proportion = c(trueRow/totRow, falseRow/totRow)
)
View(df)
totRow = nrow(Group2)
trueRow = nrow(subset(Group2, Remixed==TRUE))
falseRow = nrow(subset(Group2, Remixed==falseRow))
df = data.frame(
Remixed = c("TRUE","FALSE"),
Proportion = c(trueRow/totRow, falseRow/totRow)
)
df <- df %>%
mutate(Loves = "Loves")
ggplot(df, aes(x = Loves, y = Proportion, fill = Remixed)) +
geom_col() +
geom_text(aes(label = paste0(Proportion, "%")),
position = position_stack(vjust = 0.5)) +
scale_fill_brewer(palette = "Set2") +
theme_minimal(base_size = 16) +
ylab("Percentage") +
xlab(NULL)
totRow = nrow(Group2)
trueRow = nrow(subset(Group2, Remixed==TRUE))
falseRow = nrow(subset(Group2, Remixed==falseRow))
df = data.frame(
Remixed = c("TRUE","FALSE"),
Proportion = c((trueRow/totRow)*100, (falseRow/totRow)*100)
)
df <- df %>%
mutate(Loves = "Loves")
ggplot(df, aes(x = Loves, y = Proportion, fill = Remixed)) +
geom_col() +
geom_text(aes(label = paste0(Proportion, "%")),
position = position_stack(vjust = 0.5)) +
scale_fill_brewer(palette = "Set2") +
theme_minimal(base_size = 16) +
ylab("Percentage") +
xlab(NULL)
shiny::runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
foo <- function(a, b){
print(b)
}
foo(5,10)
foo <- function(a, b){
print(b)
}
foo(b=5,a=10)
a <- list(b=10, c=20)
a[b]
a["b"]
a[["b"]]
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
getInpChoice
View(GetEarlyTopUp)
View(GetSalesClientData)
View(getSalesData)
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
install.packages("future")
install.packages("promises")
install.packages("promises")
shiny::runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
runApp('F:/APACFIN/10May2019')
t = seq(0, 1, 0.001)
data =data.frame(
"time" = seq(0, 1, 0.001)
)
rm(t)
data$B1t = 0
View(data)
data$B1t = 0
data$B2t = with(data,
if(t >= 0 & t < 0.342){
((t-0.5)^2-0.025)
}
if(t >=  0.342 & t <= 0.658){
0
}
if(t >0.658  & t <= 1){
(-(t-0.5)^2+0.025)
}
)
data =data.frame(
"time" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
View(data)
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
View(data)
?integrate
View(data)
data$t
data$X1t = rnorm(1) + rnorm(1)*data$t + rnorm(1)* (data$t^2) + rnorm(1)* (data$t^3)
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = rnorm(1) + rnorm(1)*data$t + rnorm(1)* (data$t^2) + rnorm(1)* (data$t^3)
View(data)
?pi
pi
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = rnorm(1) + rnorm(1)*data$t + rnorm(1)* (data$t^2) + rnorm(1)* (data$t^3)
data$X2t = rnorm(1) + rnorm(1)*sin(2*pi*data$t) + rnorm(1)*(cost(2*pi*data$t)) + rnorm(1)*(sin(4*pi*data$t)) + rnorm(1)* (cos(4*pi*data$t))
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = rnorm(1) + rnorm(1)*data$t + rnorm(1)* (data$t^2) + rnorm(1)* (data$t^3)
data$X2t = rnorm(1) + rnorm(1)*sin(2*pi*data$t) + rnorm(1)*(cos(2*pi*data$t)) + rnorm(1)*(sin(4*pi*data$t)) + rnorm(1)* (cos(4*pi*data$t))
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = 0
data$X2t = 0
for(i in nrow(data)){
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
a4 = rnorm(1)
data$X1t[i] = a0 + a1*data$t[i] + a2* (data$t[i]^2) + a3* (data$t[i]^3)
data$X2t[i] = a0 + a1*sin(2*pi*data$t[i]) + a2*(cos(2*pi*data$t[i])) + a3*(sin(4*pi*data$t[i])) + a4* (cos(4*pi*data$t[i]))
}
nrow(data)
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = 0
data$X2t = 0
for(i in nrow(data)){
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
a4 = rnorm(1)
data$X1t[i] = a0 + a1 * data$t[i] + a2 * (data$t[i]^2) + a3 * (data$t[i]^3)
data$X2t[i] = a0 + a1 * sin(2*pi*data$t[i]) + a2 * (cos(2*pi*data$t[i])) + a3 * (sin(4*pi*data$t[i])) + a4 * (cos(4*pi*data$t[i]))
}
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = 0
data$X2t = 0
for(i in nrow(data)){
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
a4 = rnorm(1)
data$X1t[i] = a0 + a1 * data$t[i] + a2 * (data$t[i]^2) + a3 * (data$t[i]^3)
data$X2t[i] = a0 + a1 * sin(2*pi*data$t[i]) + a2 * cos(2*pi*data$t[i]) + a3 * sin(4*pi*data$t[i]) + a4 * cos(4*pi*data$t[i])
}
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = 0
data$X2t = 0
for(i in nrow(data)){
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
a4 = rnorm(1)
print0(a0,a1,a2,a3,a4)
data$X1t[i] = a0 + a1 * data$t[i] + a2 * (data$t[i]^2) + a3 * (data$t[i]^3)
data$X2t[i] = a0 + a1 * sin(2*pi*data$t[i]) + a2 * cos(2*pi*data$t[i]) + a3 * sin(4*pi*data$t[i]) + a4 * cos(4*pi*data$t[i])
}
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = 0
data$X2t = 0
for(i in nrow(data)){
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
a4 = rnorm(1)
print(paste0(a0,a1,a2,a3,a4))
data$X1t[i] = a0 + a1 * data$t[i] + a2 * (data$t[i]^2) + a3 * (data$t[i]^3)
data$X2t[i] = a0 + a1 * sin(2*pi*data$t[i]) + a2 * cos(2*pi*data$t[i]) + a3 * sin(4*pi*data$t[i]) + a4 * cos(4*pi*data$t[i])
}
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = 0
data$X2t = 0
for(i in 1:nrow(data)){
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
a4 = rnorm(1)
print(paste0(a0,a1,a2,a3,a4))
data$X1t[i] = a0 + a1 * data$t[i] + a2 * (data$t[i]^2) + a3 * (data$t[i]^3)
data$X2t[i] = a0 + a1 * sin(2*pi*data$t[i]) + a2 * cos(2*pi*data$t[i]) + a3 * sin(4*pi*data$t[i]) + a4 * cos(4*pi*data$t[i])
}
data =data.frame(
"t" = seq(0, 1, 0.001)
)
data$B1t = 0
data$B2t = ifelse(data$t >= 0 & data$t < 0.342,
((data$t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse( data$t >  0.658 & data$t <= 1,
(-(data$t-0.5)^2+0.025),
0
)))
data$B3t = data$t^3 - 1.6*data$t^2 + 0.76*data$t + 1
data$X1t = 0
data$X2t = 0
for(i in 1:nrow(data)){
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
a4 = rnorm(1)
data$X1t[i] = a0 + a1 * data$t[i] + a2 * (data$t[i]^2) + a3 * (data$t[i]^3)
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
a4 = rnorm(1)
data$X2t[i] = a0 + a1 * sin(2*pi*data$t[i]) + a2 * cos(2*pi*data$t[i]) + a3 * sin(4*pi*data$t[i]) + a4 * cos(4*pi*data$t[i])
}
B3t <- function(t){
t**3 - 1.6*t**2 +0.76*t+1
}
B3t <- function(t){
t**3 - 1.6*t**2 +0.76*t+1
}
B2t <- function(t){
ifelse(t >= 0 & t < 0.342,
((t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse(t >  0.658 & t <= 1,
(-(t-0.5)^2+0.025),
0
)))
}
B1t <- function(t){
0
}
B1t(0.05)
B2t(0.05)
B2t(0.05)
B3t(0.05)
integrate(B3t,0,1)$value
integrate(B1t,0,1)$value
integrate(B2t,0,1)$value
integrate(B2t*X1t,0,1)$value
data =data.frame(
"t" = seq(0, 1, 0.001)
)
B3t <- function(t){
t**3 - 1.6*t**2 +0.76*t+1
}
B2t <- function(t){
ifelse(t >= 0 & t < 0.342,
((t-0.5)^2-0.025),
ifelse( data$t >=  0.342 & data$t <= 0.658,
0,
ifelse(t >  0.658 & t <= 1,
(-(t-0.5)^2+0.025),
0
)))
}
B1t <- function(t){
0
}
X1t <- function(t){
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
return(a0 + a1*t + a2*(t^2) + a3*(t^3))
}
X2t <- function(t){
a0 = rnorm(1)
a1 = rnorm(1)
a2 = rnorm(1)
a3 = rnorm(1)
a4 = rnorm(1)
return(a0 + a1 * sin(2*pi*t) + a2 * cos(2*pi*t) + a3 * sin(4*pi*t) + a4 * cos(4*pi*t))
}
#data$sigmaSq = 0.25 * integrate(B1t(data$t))
#You can generate the standard normal distribution using the function rnorm().
#Also, the integral function works with functions and limits.
#You don't need to calculate the values of the function,
#just define it: B3t <- function(t) (t**3 - 1.6*t**2 +0.76*t+1 ) .
#Then the single integral of B3t from 0 to 1 would be integrate(B3t,0,1)$value
integrate(B2t*X1t,0,1)$value
mean(B1t(data$t))
mean(B2t(data$t))
mean(B3t(data$t))
shiny::runApp('F:/RProjects/jadeng177')
runApp('F:/RProjects/jadeng177')
shiny::runApp('F:/RProjects/jadeng177')
setwd("F:\\RProjects\\jadeng177")
airbnb_Data <- readxl::read_excel("airbnb_data.xlsx" )
View(airbnb_Data)
subset(sel_nhd, Year == "2017" & neighbourhood ==  "Moreland"  &  room_type == "Shared room")
subset(airbnb_Data, Year == "2017" & neighbourhood ==  "Moreland"  &  room_type == "Shared room")
df = subset(airbnb_Data, Year == "2017" & neighbourhood ==  "Moreland"  &  room_type == "Shared room")
View(df)
ListingDF = df %>%
group_by(availability_365) %>%
summarise(TotalListings = sum(calculated_host_listings_count))
View(ListingDF)
View(df)
highAvail = sum(subset(ListingDF, availability_365 >= 90)[,2])
lowAvail = sum(subset(ListingDF, availability_365 < 90)[,2])
subset(ListingDF, availability_365 < 90)[,2]
subset(ListingDF, availability_365 < 90)[,2] <- l
subset(ListingDF, availability_365 < 90)[,2] -> l
View(l)
length(l)
View(l)
nrow(l)
subset(ListingDF, availability_365 > 90)[,2] -> l
nrow(l)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
setwd("F:\\RProjects\\jadeng177")
airbnb_Data -> readxl::read_excel("airbnb_data.xlsx")
airbnb_data -> readxl::read_excel("airbnb_data.xlsx")
airbnb_Data -> readxl::read_excel("airbnb_data.xlsx")
ls()
ls
dir()
airbnb_Data -> readxl::read_excel("airbnb_data.xlsx")
runApp()
shiny::runApp()
